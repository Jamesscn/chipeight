This is a preview of the disassembly of the tetris rom, I commented the first few lines with what I believe to be happening within the ROM.

Note: due to the fact that some code is used for storing memory, not all of it is executable. Such values may appear as sys* or invalid.

Variables:

V0 = X
V1 = Y
V3 = random block
V4 = random block
V5 = timer
V6 = random block
V11 = number of blocks in current row
V13 = temporary y
V14 = temporary y - 1
V15 = collision

  DISASSEMBLY OF ../roms/tetris.rom
-----------------------------------------
  ADDRESS	INSTRUCTION
0x0200  512 | 0xa2b4: lea	I, 692; gets the sprite at 692, the value is 80 or bin[10000000], a single pixel
0x0202  514 | 0x23e6: call	998; sets V[0] = 25, V[10] = 0
0x0204  516 | 0x22b6: call	694; sets V[1] = 31, V[2] = 7, V[5] = 16, V[7] = 5, V[8] = 6, V[9] = 4
0x0206  518 | 0x7001: add	V0, 1; for loop that draws the bottom, it goes from V[0] = 25 to V[0] = 37, this is the x value and V[1] is the bottom (31)
0x0208  520 | 0xd011: draw	V0, V1, 1; draws the single pixel loaded at I at x = V0 and y = V1
0x020a  522 | 0x3025: se	V0, 37; ends the loop when x = 37
0x020c  524 | 0x1206: jmp	518; if not ended, keep on going left
0x020e  526 | 0x71ff: add	V1, 255; add 255 (instead of subtracting 1) because you can only subtract from registers, very clever
0x0210  528 | 0xd011: draw	V0, V1, 1; draw the rightmost wall
0x0212  530 | 0x601a: mov	V0, 26; go to the left wall
0x0214  532 | 0xd011: draw	V0, V1, 1; draw the leftmost wall
0x0216  534 | 0x6025: mov	V0, 37; go to the right wall
0x0218  536 | 0x3100: se	V1, 0; skip once the top is reached
0x021a  538 | 0x120e: jmp	526; if not, repeat

0x021c  540 | 0xc470: rand	V4, 112; 112 = 0x70 = bin[01110000], this stores a random multiple of 16 between 16 and 112 in V[4]
0x021e  542 | 0x4470: sne	V4, 112; if the value is 112, it retries, so this actually gets a value between 16 and 96
0x0220  544 | 0x121c: jmp	540
0x0222  546 | 0xc303: rand	V3, 3; 3 = 0x03 = bin[00000011], this stores a value between 0 and 3
0x0224  548 | 0x601e: mov	V0, 30; x is 30 or middle
0x0226  550 | 0x6103: mov	V1, 3; y is 3, initial height of the block
0x0228  552 | 0x225c: call	604; chooses a piece

0x022a  554 | 0xf515: lea	DT, V5; sets the delay timer to V5, originally 16
0x022c  556 | 0xd014: draw	V0, V1, 4; draws a 4 high sprite at the x and y, most certainly block
0x022e  558 | 0x3f01: se	V15, 1; skips if VF = 1, this is for a collision when the bottom is reached
0x0230  560 | 0x123c: jmp	572; if the block is still in the air, go to 572
0x0232  562 | 0xd014: draw	V0, V1, 4; removes the block
0x0234  564 | 0x71ff: add	V1, 255; moves it one up
0x0236  566 | 0xd014: draw	V0, V1, 4; draws it one block higher
0x0238  568 | 0x2340: call	832; checks if the row is complete
0x023a  570 | 0x121c: jmp	540; go back and choose a new block (the block has been placed)

0x023c  572 | 0xe7a1: sknp	V7
0x023e  574 | 0x2272: call	626
0x0240  576 | 0xe8a1: sknp	V8
0x0242  578 | 0x2284: call	644
0x0244  580 | 0xe9a1: sknp	V9
0x0246  582 | 0x2296: call	662
0x0248  584 | 0xe29e: skip	V2
0x024a  586 | 0x1250: jmp	592
0x024c  588 | 0x6600: mov	V6, 0
0x024e  590 | 0xf615: lea	DT, V6
0x0250  592 | 0xf607: lea	V6, DT
0x0252  594 | 0x3600: se	V6, 0
0x0254  596 | 0x123c: jmp	572
0x0256  598 | 0xd014: draw	V0, V1, 4
0x0258  600 | 0x7101: add	V1, 1
0x025a  602 | 0x122a: jmp	554
------------CHOOSEPIECE-------------- ; Chooses a random tetris piece
0x025c  604 | 0xa2c4: lea	I, 708; sets I to value at 708 0x40e0
0x025e  606 | 0xf41e: add	I, V4; adds the random 16 to 96 value
0x0260  608 | 0x6600: mov	V6, 0; V[6] = 0 if V[3] == 0
0x0262  610 | 0x4301: sne	V3, 1
0x0264  612 | 0x6604: mov	V6, 4; V[6] = 4 if V[3] == 1
0x0266  614 | 0x4302: sne	V3, 2
0x0268  616 | 0x6608: mov	V6, 8; V[6] = 8 if V[3] == 2
0x026a  618 | 0x4303: sne	V3, 3
0x026c  620 | 0x660c: mov	V6, 12; V[6] = 12 if V[3] == 3; essentially V[6] = V[3] * 4
0x026e  622 | 0xf61e: add	I, V6; adds V[3] * 4, I = 0x40e0 + rand(1, 6) * 16 + rand(0, 3)
0x0270  624 | 0x00ee: ret

0x0272  626 | 0xd014: draw	V0, V1, 4
0x0274  628 | 0x70ff: add	V0, 255
0x0276  630 | 0x2334: call	820
0x0278  632 | 0x3f01: se	V15, 1
0x027a  634 | 0x00ee: ret
0x027c  636 | 0xd014: draw	V0, V1, 4
0x027e  638 | 0x7001: add	V0, 1
0x0280  640 | 0x2334: call	820
0x0282  642 | 0x00ee: ret
0x0284  644 | 0xd014: draw	V0, V1, 4
0x0286  646 | 0x7001: add	V0, 1
0x0288  648 | 0x2334: call	820
0x028a  650 | 0x3f01: se	V15, 1
0x028c  652 | 0x00ee: ret
0x028e  654 | 0xd014: draw	V0, V1, 4
0x0290  656 | 0x70ff: add	V0, 255
0x0292  658 | 0x2334: call	820
0x0294  660 | 0x00ee: ret
0x0296  662 | 0xd014: draw	V0, V1, 4
0x0298  664 | 0x7301: add	V3, 1
0x029a  666 | 0x4304: sne	V3, 4
0x029c  668 | 0x6300: mov	V3, 0
0x029e  670 | 0x225c: call	604
0x02a0  672 | 0x2334: call	820
0x02a2  674 | 0x3f01: se	V15, 1
0x02a4  676 | 0x00ee: ret
0x02a6  678 | 0xd014: draw	V0, V1, 4
0x02a8  680 | 0x73ff: add	V3, 255
0x02aa  682 | 0x43ff: sne	V3, 255
0x02ac  684 | 0x6303: mov	V3, 3
0x02ae  686 | 0x225c: call	604
0x02b0  688 | 0x2334: call	820
0x02b2  690 | 0x00ee: ret
0x02b4  692 | 0x8000: mov	V0, V0
-------------INITVARIABLES------------- ; Initializes the variables for game building
0x02b6  694 | 0x6705: mov	V7, 5
0x02b8  696 | 0x6806: mov	V8, 6
0x02ba  698 | 0x6904: mov	V9, 4
0x02bc  700 | 0x611f: mov	V1, 31
0x02be  702 | 0x6510: mov	V5, 16
0x02c0  704 | 0x6207: mov	V2, 7
0x02c2  706 | 0x00ee: ret

0x02c4  708 | 0x40e0: sne	V0, 224
0x02c6  710 | 0x0000: sys*	0
0x02c8  712 | 0x40c0: sne	V0, 192
0x02ca  714 | 0x4000: sne	V0, 0
0x02cc  716 | 0x00e0: cls
0x02ce  718 | 0x4000: sne	V0, 0
0x02d0  720 | 0x4060: sne	V0, 96
0x02d2  722 | 0x4000: sne	V0, 0
0x02d4  724 | 0x4040: sne	V0, 64
0x02d6  726 | 0x6000: mov	V0, 0
0x02d8  728 | 0x20e0: call	224
0x02da  730 | 0x0000: sys*	0
0x02dc  732 | 0xc040: rand	V0, 64
0x02de  734 | 0x4000: sne	V0, 0
0x02e0  736 | 0x00e0: cls
0x02e2  738 | 0x8000: mov	V0, V0
0x02e4  740 | 0x4040: sne	V0, 64
0x02e6  742 | 0xc000: rand	V0, 0
0x02e8  744 | 0x00e0: cls
0x02ea  746 | 0x2000: call	0
0x02ec  748 | 0x6040: mov	V0, 64
0x02ee  750 | 0x4000: sne	V0, 0
0x02f0  752 | 0x80e0: mov	V0, V14
0x02f2  754 | 0x0000: sys*	0
0x02f4  756 | 0x40c0: sne	V0, 192
0x02f6  758 | 0x8000: mov	V0, V0
0x02f8  760 | 0xc060: rand	V0, 96
0x02fa  762 | 0x0000: sys*	0
0x02fc  764 | 0x40c0: sne	V0, 192
0x02fe  766 | 0x8000: mov	V0, V0
0x0300  768 | 0xc060: rand	V0, 96
0x0302  770 | 0x0000: sys*	0
0x0304  772 | 0x80c0: mov	V0, V12
0x0306  774 | 0x4000: sne	V0, 0
0x0308  776 | 0x0060: sys*	96
0x030a  778 | 0xc000: rand	V0, 0
0x030c  780 | 0x80c0: mov	V0, V12
0x030e  782 | 0x4000: sne	V0, 0
0x0310  784 | 0x0060: sys*	96
0x0312  786 | 0xc000: rand	V0, 0
0x0314  788 | 0xc0c0: rand	V0, 192
0x0316  790 | 0x0000: sys*	0
0x0318  792 | 0xc0c0: rand	V0, 192
0x031a  794 | 0x0000: sys*	0
0x031c  796 | 0xc0c0: rand	V0, 192
0x031e  798 | 0x0000: sys*	0
0x0320  800 | 0xc0c0: rand	V0, 192
0x0322  802 | 0x0000: sys*	0
0x0324  804 | 0x4040: sne	V0, 64
0x0326  806 | 0x4040: sne	V0, 64
0x0328  808 | 0x00f0: sys*	240
0x032a  810 | 0x0000: sys*	0
0x032c  812 | 0x4040: sne	V0, 64
0x032e  814 | 0x4040: sne	V0, 64
0x0330  816 | 0x00f0: sys*	240
0x0332  818 | 0x0000: sys*	0
0x0334  820 | 0xd014: draw	V0, V1, 4
0x0336  822 | 0x6635: mov	V6, 53
0x0338  824 | 0x76ff: add	V6, 255
0x033a  826 | 0x3600: se	V6, 0
0x033c  828 | 0x1338: jmp	824
0x033e  830 | 0x00ee: ret
----------------ROWCOMPLETE--------------- ; Decides what to do if a row is complete
0x0340  832 | 0xa2b4: lea	I, 692; single pixel stored in draw
0x0342  834 | 0x8c10: mov	V12, V1; get the Y value in V12
0x0344  836 | 0x3c1e: se	V12, 30
0x0346  838 | 0x7c01: add	V12, 1
0x0348  840 | 0x3c1e: se	V12, 30
0x034a  842 | 0x7c01: add	V12, 1
0x034c  844 | 0x3c1e: se	V12, 30
0x034e  846 | 0x7c01: add	V12, 1; adds 3 to height or until 30 is reached
0x0350  848 | 0x235e: call	862; checks if row 3 below is complete
0x0352  850 | 0x4b0a: sne	V11, 10; v11 is now the amount of blocks in the row, if 10, the row is complete and must be deleted
0x0354  852 | 0x2372: call	882; this is called if the row is 10 blocks and can be removed
0x0356  854 | 0x91c0: sne	V1, V12
0x0358  856 | 0x00ee: ret

0x035a  858 | 0x7101: add	V1, 1
0x035c  860 | 0x1350: jmp	848
----------------ROWCOUNT------------------ ; Checks if a row is complete by counting
0x035e  862 | 0x601b: mov	V0, 27; sets X to 27
0x0360  864 | 0x6b00: mov	V11, 0; initializes V11 as 0
0x0362  866 | 0xd011: draw	V0, V1, 1; draws a pixel
0x0364  868 | 0x3f00: se	V15, 0; if collision, don't add
0x0366  870 | 0x7b01: add	V11, 1; add 1 to V11 in case of collision
0x0368  872 | 0xd011: draw	V0, V1, 1; resets the pixel to original value
0x036a  874 | 0x7001: add	V0, 1; move x 1 right
0x036c  876 | 0x3025: se	V0, 37; end when the right wall is reached
0x036e  878 | 0x1362: jmp	866; repeat until the end is reached
0x0370  880 | 0x00ee: ret

---------------DELETEROW------------------ ; First deletes the redundant row, then moves the higher rows down
0x0372  882 | 0x601b: mov	V0, 27; set X to 27
0x0374  884 | 0xd011: draw	V0, V1, 1; remove the pixel there
0x0376  886 | 0x7001: add	V0, 1; move the x one right
0x0378  888 | 0x3025: se	V0, 37; skip once the row is replaced
0x037a  890 | 0x1374: jmp	884; repeat if row not fully replaced
0x037c  892 | 0x8e10: mov	V14, V1; stores the y in V14
0x037e  894 | 0x8de0: mov	V13, V14; stores the y in V13
0x0380  896 | 0x7eff: add	V14, 255; subtracts 1 from V14
0x0382  898 | 0x601b: mov	V0, 27; set X to the left pixel
0x0384  900 | 0x6b00: mov	V11, 0; set V11 to 0
0x0386  902 | 0xd0e1: draw	V0, V14, 1; check pixel at y - 1
0x0388  904 | 0x3f00: se	V15, 0; skip if the value is empty
0x038a  906 | 0x1390: jmp	912; jump if there is a collision
0x038c  908 | 0xd0e1: draw	V0, V14, 1; remove the check pixel
0x038e  910 | 0x1394: jmp	916; jump if there was no collision
0x0390  912 | 0xd0d1: draw	V0, V13, 1; moves the pixel one down
0x0392  914 | 0x7b01: add	V11, 1; add 1 to row counter
0x0394  916 | 0x7001: add	V0, 1; add 1 to x
0x0396  918 | 0x3025: se	V0, 37; when x is at end; skip
0x0398  920 | 0x1386: jmp	902; if not, move the next row down
0x039a  922 | 0x4b00: sne	V11, 0; skips if the row above was empty
0x039c  924 | 0x13a6: jmp	934, if not, move that one down
0x039e  926 | 0x7dff: add	V13, 255
0x03a0  928 | 0x7eff: add	V14, 255
0x03a2  930 | 0x3d01: se	V13, 1
0x03a4  932 | 0x1382: jmp	898
0x03a6  934 | 0x23c0: call	960
0x03a8  936 | 0x3f01: se	V15, 1
0x03aa  938 | 0x23c0: call	960
0x03ac  940 | 0x7a01: add	V10, 1
0x03ae  942 | 0x23c0: call	960
0x03b0  944 | 0x80a0: mov	V0, V10
0x03b2  946 | 0x6d07: mov	V13, 7
0x03b4  948 | 0x80d2: and	V0, V13
0x03b6  950 | 0x4004: sne	V0, 4
0x03b8  952 | 0x75fe: add	V5, 254
0x03ba  954 | 0x4502: sne	V5, 2
0x03bc  956 | 0x6504: mov	V5, 4
0x03be  958 | 0x00ee: ret

-----------------------------------------
0x03c0  960 | 0xa700: lea	I, 1792
0x03c2  962 | 0xf255: lea	[I], V2
0x03c4  964 | 0xa804: lea	I, 2052
0x03c6  966 | 0xfa33: lea	B, V10
0x03c8  968 | 0xf265: lea	V2, [I]
0x03ca  970 | 0xf029: lea	F, V0
0x03cc  972 | 0x6d32: mov	V13, 50
0x03ce  974 | 0x6e00: mov	V14, 0
0x03d0  976 | 0xdde5: draw	V13, V14, 5
0x03d2  978 | 0x7d05: add	V13, 5
0x03d4  980 | 0xf129: lea	F, V1
0x03d6  982 | 0xdde5: draw	V13, V14, 5
0x03d8  984 | 0x7d05: add	V13, 5
0x03da  986 | 0xf229: lea	F, V2
0x03dc  988 | 0xdde5: draw	V13, V14, 5
0x03de  990 | 0xa700: lea	I, 1792
0x03e0  992 | 0xf265: lea	V2, [I]
0x03e2  994 | 0xa2b4: lea	I, 692
0x03e4  996 | 0x00ee: ret

---------------INITXY----------------- ; Sets the x and y needed for floor building
0x03e6  998 | 0x6a00: mov	V10, 0
0x03e8 1000 | 0x6019: mov	V0, 25
0x03ea 1002 | 0x00ee: ret

0x03ec 1004 | 0x3723: se	V7, 35
